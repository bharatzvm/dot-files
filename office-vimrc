" No compatibilty with vi
set nocompatible

" Set filetype detection, indent and syntax on
filetype plugin indent on

" Initialise vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Package manager
Plugin 'VundleVim/Vundle.vim'

" Asynchronous Lint Engine - supports vim8+
Plugin 'w0rp/ale'

" Fuzzy file finder
Plugin 'kien/ctrlp.vim.git'

" Comment
Plugin 'tpope/vim-commentary.git'

" Git
Plugin 'tpope/vim-fugitive'

" Snippet engine
Plugin 'SirVer/ultisnips'

" Only Snippets separated from the engine
Plugin 'honza/vim-snippets'

" Webapi
Plugin 'mattn/webapi-vim'

" Colorschemes
Plugin 'flazz/vim-colorschemes'

" Javascript syntax and indent
Plugin 'pangloss/vim-javascript.git'

" Jsx syntax
Plugin 'mxw/vim-jsx'

" Json syntax
Plugin 'elzr/vim-json'

" Rust
Plugin 'rust-lang/rust.vim'

" Rust Documentaion
Plugin 'rhysd/rust-doc.vim'

" ELM
Plugin 'elmcast/elm-vim'

" Typescript syntax
Plugin 'leafgarland/typescript-vim'

" Typescript Language services
Plugin 'Quramy/tsuquyomi'

" For managing YCM & ulti snips
" Plugin 'ervandew/supertab'

" YouCompleteMe
" Plugin 'Valloric/YouCompleteMe'

" Markdown
" Plugin 'tpope/vim-markdown'

Plugin 'plasticboy/vim-markdown'


call vundle#end()

" Overrule highlight settings by defult vim settings
syntax on


" Add dictionary of words used
" set dictionary-=/usr/share/dict/words dictionary+=/home/bp/.dict/words

" Complete option - ctrl-n/ctrl-p use dictionary
" set complete+=k

" Omnicompletion
" set omnifunc=syntaxcomplete#Complete

" Tab - space fight
set shiftwidth=2 tabstop=2 expandtab softtabstop=0 smarttab

" Ctrl + p Buffers
nnoremap <leader>b :CtrlPBuffer<CR>

" Ctrl + p Reindex
nnoremap <leader>r :CtrlPClearCache<CR>

" Ctrlp ignore
let g:ctrlp_custom_ignore='node_modules'

" Ctrlp filename mode
let g:ctrlp_by_filename = 1

" To use project specific setting every project can have its own vimrc file
set exrc
set secure

" Set to auto read when a file is changed from the outside
set autoread

" Line numbers
set number
set relativenumber

" Specify the character encoding used in the files.
set encoding=utf-8
scriptencoding utf-8

" To toggle invisible characters
nnoremap <leader>l :set list!<CR>
set listchars=trail:·,precedes:«,extends:»,eol:↲,tab:+\ 

" To toggle line numbers
nnoremap <leader>nu :set number!<CR> 
nnoremap <leader>nr :set relativenumber!<CR>
nnoremap <leader>na :set number! relativenumber!<CR>

" Toggle paste mode
set pastetoggle=<F2>

" Edit and Source vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Paste in new line
nnoremap <leader>p :pu<CR>
nnoremap <leader>P :pu!<CR>

" Clear search highlighting
nnoremap <cr> :noh<CR><CR>:<backspace><Esc>

" Allow backspacing over everything in insert mode.
set backspace=indent,eol,start

" Until you get used to using vim delete options backspace will only be able
" to delete whatever is inserted in the current insert mode
set backspace=

" keep 200 lines of command line history
set history=200

" show the cursor position all the time
set ruler

" display incomplete commands in last line - key mappings using leader
set showcmd

" display completion matches in a status line
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc

" time out for key codes
set ttimeout

" wait up to 100ms after Esc for special key
set ttimeoutlen=300

" Show @@@ in the last line if it is truncated.
set display=truncate

" Show a few lines of context around the cursor.
set scrolloff=15

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases 
set smartcase

" Highlight search results
set hlsearch

" set incremental search and hit <Esc> to go back to the cursor position you
" started search Also use <c-o> to go back if you have searched morethan once
" <c-o> <c-i> moves you between your cursor postions
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Search selection
vnoremap // y/\V<C-R>"<CR>

" Don't use Ex mode, use Q for formatting. Revert with ":unmap Q".
" gq formats text
" If you don't want to unbound Q map it with "<nop>"
nnoremap Q gq

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set mat=1

" SSH colorsupport
set t_Co=256

" Light background
colorscheme Chasing_Logic
" colorscheme apprentice
" colorscheme cake1616
" colorscheme calmar256-dark
" colorscheme colorsbox-faff
" colorscheme crayon
" colorscheme corporation
" colorscheme eva
" colorscheme eva01
" colorscheme enigma
" colorscheme flatcolor
" colorscheme flatui
" colorscheme getafe
" colorscheme goodwolf
" colorscheme gruvbox
" colorscheme hemisu
" colorscheme hotpot
" colorscheme hybrid
" colorscheme hybrid-light
" colorscheme hybrid_material
" colorscheme jellyx

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Turn backup off
set nobackup
set nowb
set noswapfile

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
	\ if line("'\"") > 0 && line("'\"") <= line("$") |
	\   exe "normal! g`\"" |
	\ endif

" Remember info about open buffers on close
set viminfo^=%

" Dont open preview window
set completeopt-=preview

" set path
set path+=**

" Tab number
set showtabline=2 " always show tabs in gvim, but not vim

" set up tab labels with tab number, buffer name, number of windows
function! GuiTabLabel()
  let label = ''
  let bufnrlist = tabpagebuflist(v:lnum)
  " Add '+' if one of the buffers in the tab page is modified
  for bufnr in bufnrlist
    if getbufvar(bufnr, "&modified")
      let label = '+'
      break
    endif
  endfor
  " Append the tab number
  let label .= v:lnum.': '
  " Append the buffer name
  let name = bufname(bufnrlist[tabpagewinnr(v:lnum) - 1])
  if name == ''
    " give a name to no-name documents
    if &buftype=='quickfix'
      let name = '[Quickfix List]'
    else
      let name = '[No Name]'
    endif
  else
    " get only the file name
    let name = fnamemodify(name,":t")
  endif
  let label .= name
  " Append the number of windows in the tab page
  let wincount = tabpagewinnr(v:lnum, '$')
  return label . '  [' . wincount . ']'
endfunction

" Set guitablabel
set guitablabel=%{GuiTabLabel()}

" clist movement
nnoremap <silent> <leader>] :cnext<CR>  
nnoremap <silent> <leader>[ :cprevious<CR>

" Elm
autocmd BufRead,BufNewFile *.elm set filetype=elm
let g:elm_setup_keybindings = 0
let g:elm_jump_to_error = 0
let g:elm_make_show_warnings = 1
let g:elm_make_output_file = '/dev/null'

" Filetype groups
autocmd BufNewFile,BufRead *.ts set filetype=typescript

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" Ultisnips python version
let g:UltiSnipsUsePythonVersion = 3

" Add personal ultisnippet
set runtimepath+=/home/bp/git/dot-files/vim
let g:UltiSnipsSnippetsDir = "/home/bp/git/dot-files/vim/snips"
let g:UltiSnipsSnippetDirectories=['snips', 'UltiSnips']

" Rust doc
let g:rust_doc#downloaded_rust_doc_dir = '/home/bp/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/'

" ALE Message Format
let g:ale_sign_error = '✖'
let g:ale_sign_warning = '⚠'
let g:ale_echo_msg_error_str = 'Error'
let g:ale_echo_msg_warning_str = 'Warning'
let g:ale_echo_msg_format = '[%linter%] [%code%] %s [%severity%]'
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['eslint'],
\}

let g:ale_linters = {}
let g:ale_linters.typescript = [
\ 'tslint',
\ 'tsserver',
\]

let g:ale_linters.javascript = [
\ 'eslint',
\ 'tsserver'
\]

let g:ale_fixers.json = [
\ 'prettier',
\ 'remove_trailing_lines',
\ 'trim_whitespace'
\]

" ALE Gotofile
nnoremap <leader>dg :ALEGoToDefinition<CR>
nnoremap <leader>gd :ALEGoToDefinitionInTab<CR>
nnoremap <leader>j :ALENext<CR>
nnoremap <leader>k :ALEPrevious<CR>
nnoremap <Leader>lf :ALEFix<CR>

" copy selection
" '<,'>!tee >(xclip -sel clip)

" Sudo save
" :w !sudo tee %

" Auto set conf files filetype
autocmd BufNewFile,BufRead *.conf set filetype=conf

" go to file in current window - normal mode
" gf

" go to file in new window - normal mode
" <c-w>f

" go to file in new tab - normal mode
" <c-w>gf

" Open buffers in new tab - vimgrep
set switchbuf+=usetab,newtab

" Timestamp Complicated
" let g:time_stamp_enabled = 0
" let g:time_stamp_start = 0
" command! TimeStampToggle call TimeStampToggle()

" function TimeStampToggle()
"   let g:time_stamp_enabled = !g:time_stamp_enabled
"   let g:time_stamp_start = strftime("%s") 
"      " Time in seconds since the Unix epoch
" endfunction

" inoremap <expr> <CR> g:time_stamp_enabled ? "\<ESC>:call TimeStamp()\<CR>a" : "\<CR>"

" function! TimeStamp()
"      let l:current_sec = printf("%02d", strftime("%s") - g:time_stamp_start)
"      let l:current_min = 0
"      let l:current_hr  = 0

"      while l:current_sec >= 60
"        let l:current_sec -= 60
"        let l:current_min += 1
"      endwhile

"      while l:current_min >= 60
"        let l:current_min -= 60
"        let l:current_hr  += 1
"      endwhile

"      let l:current_sec = printf("%02d", l:current_sec)
"      let l:current_min = printf("%02d", l:current_min)
"      let l:current_hr  = printf("%02d", l:current_hr)

"      " Go to the beginning of the line,
"      " print the current zero-padded time,
"      " print `  -  ` as a separator
"      " and move the cursor over for the next line (with separator)
"      execute "normal! 0i\<SPACE>\<ESC>0dwi\
"            \<C-R>=l:current_hr\<CR>:\<C-R>=l:current_min\<CR>:\<C-R>=l:current_sec \<CR>\
"            \<SPACE>\<SPACE>—\<SPACE>\<SPACE>\<ESC>o\<SPACE>\<SPACE>\<SPACE>\<SPACE>\
"            \<SPACE>\<SPACE>\<SPACE>\<SPACE>\<SPACE>\<SPACE>\<SPACE>\<SPACE>\<SPACE>"

"  endfunction

" Timestamp simple
let g:time_stamp_enabled = 0
command! TimeStampToggle let g:time_stamp_enabled = !g:time_stamp_enabled

function! TimeStampToggleFunction()
  let g:time_stamp_enabled = !g:time_stamp_enabled
endfunction

inoremap <expr> <CR> g:time_stamp_enabled ? "\<ESC>:call TimeStamp()\<CR>a" : "\<CR>"

function! TimeStamp()
     let l:current_time = strftime("%b %d %Y %H:%M:%S")
     execute "normal! 0i\<SPACE>\<ESC>0dwi\<C-R>=l:current_time\<CR>\<ESC>o\<SPACE>\<SPACE>"
endfunction

" " YCM Conf
" let g:ycm_global_ycm_extra_conf = '~/.global_extra_conf.py'
" let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
" let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
" let g:SuperTabDefaultCompletionType = '<C-n>'

" " Better key bindings for UltiSnipsExpandTrigger
" let g:UltiSnipsExpandTrigger = "<tab>"
" let g:UltiSnipsJumpForwardTrigger = "<Right>"
" let g:UltiSnipsJumpBackwardTrigger = "<Left>"

" Markdown options for plastic-boy
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_no_default_key_mappings = 1

" Get filetype
" set filetype?

" Jumping
" Jump to tag using <CTRL-]>
" Jump Back and forth using <CTRL-I> <CTRL-O>
